/*
 * OriginStamp Client
 *
 * OpenAPI spec version: 3.0
 * OriginStamp Documentation: https://docs.originstamp.com
 * Contact: mail@originstamp.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */


package com.originstamp.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.originstamp.model.UsageResponse;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

/**
 * The default service response object uses error code and message to indicate errors. These errors are handled by the client.
 */
@ApiModel(description = "The default service response object uses error code and message to indicate errors. These errors are handled by the client.")
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2021-03-18T14:06:09.411+01:00")
public class DefaultUsageResponse {
  @SerializedName("data")
  private UsageResponse data = null;

  @SerializedName("error_code")
  private Integer errorCode = null;

  @SerializedName("error_message")
  private String errorMessage = null;

  public DefaultUsageResponse data(UsageResponse data) {
    this.data = data;
    return this;
  }

   /**
   * Generic response object which contains the response data, e.g. timestamp information.
   * @return data
  **/
  @ApiModelProperty(value = "Generic response object which contains the response data, e.g. timestamp information.")
  public UsageResponse getData() {
    return data;
  }

  public void setData(UsageResponse data) {
    this.data = data;
  }

  public DefaultUsageResponse errorCode(Integer errorCode) {
    this.errorCode = errorCode;
    return this;
  }

   /**
   * Contains the error of the request. If the error code is 0, everything is fine.
   * @return errorCode
  **/
  @ApiModelProperty(value = "Contains the error of the request. If the error code is 0, everything is fine.")
  public Integer getErrorCode() {
    return errorCode;
  }

  public void setErrorCode(Integer errorCode) {
    this.errorCode = errorCode;
  }

  public DefaultUsageResponse errorMessage(String errorMessage) {
    this.errorMessage = errorMessage;
    return this;
  }

   /**
   * Contains the error message, that possibly occurred. If it is empty, everything is fine.
   * @return errorMessage
  **/
  @ApiModelProperty(value = "Contains the error message, that possibly occurred. If it is empty, everything is fine.")
  public String getErrorMessage() {
    return errorMessage;
  }

  public void setErrorMessage(String errorMessage) {
    this.errorMessage = errorMessage;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DefaultUsageResponse defaultUsageResponse = (DefaultUsageResponse) o;
    return Objects.equals(this.data, defaultUsageResponse.data) &&
        Objects.equals(this.errorCode, defaultUsageResponse.errorCode) &&
        Objects.equals(this.errorMessage, defaultUsageResponse.errorMessage);
  }

  @Override
  public int hashCode() {
    return Objects.hash(data, errorCode, errorMessage);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DefaultUsageResponse {\n");
    
    sb.append("    data: ").append(toIndentedString(data)).append("\n");
    sb.append("    errorCode: ").append(toIndentedString(errorCode)).append("\n");
    sb.append("    errorMessage: ").append(toIndentedString(errorMessage)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

