/*
 * OriginStamp Client
 *
 * OpenAPI spec version: 3.0
 * OriginStamp Documentation: https://docs.originstamp.com
 * Contact: mail@originstamp.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */


package com.originstamp.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.originstamp.model.Notification;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

/**
 * request object for a timestamp request.
 */
@ApiModel(description = "request object for a timestamp request.")
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2021-03-18T14:06:09.411+01:00")
public class TimestampRequest {
  @SerializedName("comment")
  private String comment = null;

  @SerializedName("hash")
  private String hash = null;

  @SerializedName("notifications")
  private List<Notification> notifications = null;

  public TimestampRequest comment(String comment) {
    this.comment = comment;
    return this;
  }

   /**
   * You can add a short comment (max. 256 characters) which can be used for indexing and searching (public).
   * @return comment
  **/
  @ApiModelProperty(example = "test", value = "You can add a short comment (max. 256 characters) which can be used for indexing and searching (public).")
  public String getComment() {
    return comment;
  }

  public void setComment(String comment) {
    this.comment = comment;
  }

  public TimestampRequest hash(String hash) {
    this.hash = hash;
    return this;
  }

   /**
   * Hash in HEX representation. We suggest to use SHA-256. This hash will be aggregated and included into the blockchain.
   * @return hash
  **/
  @ApiModelProperty(example = "2c5d36be542f8f0e7345d77753a5d7ea61a443ba6a9a86bb060332ad56dba38e", required = true, value = "Hash in HEX representation. We suggest to use SHA-256. This hash will be aggregated and included into the blockchain.")
  public String getHash() {
    return hash;
  }

  public void setHash(String hash) {
    this.hash = hash;
  }

  public TimestampRequest notifications(List<Notification> notifications) {
    this.notifications = notifications;
    return this;
  }

  public TimestampRequest addNotificationsItem(Notification notificationsItem) {
    if (this.notifications == null) {
      this.notifications = new ArrayList<>();
    }
    this.notifications.add(notificationsItem);
    return this;
  }

   /**
   * Add a notification/notification list to your submission. Our system will notify the specified target with the timestamp information.
   * @return notifications
  **/
  @ApiModelProperty(value = "Add a notification/notification list to your submission. Our system will notify the specified target with the timestamp information.")
  public List<Notification> getNotifications() {
    return notifications;
  }

  public void setNotifications(List<Notification> notifications) {
    this.notifications = notifications;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TimestampRequest timestampRequest = (TimestampRequest) o;
    return Objects.equals(this.comment, timestampRequest.comment) &&
        Objects.equals(this.hash, timestampRequest.hash) &&
        Objects.equals(this.notifications, timestampRequest.notifications);
  }

  @Override
  public int hashCode() {
    return Objects.hash(comment, hash, notifications);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TimestampRequest {\n");
    
    sb.append("    comment: ").append(toIndentedString(comment)).append("\n");
    sb.append("    hash: ").append(toIndentedString(hash)).append("\n");
    sb.append("    notifications: ").append(toIndentedString(notifications)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

