/*
 * OriginStamp Documentation
 * <br/>The following documentation describes the API v3 for OriginStamp. With this documentation you are able to try out the different requests and see the responses. For the authorization, add your API key to the Authorization header of your request.<br/><h2>Invoice</h2><p>The invoice is based on your individual usage. The following table illustrates the credits,that are billed in credits.</p><table><tr><th>Request Type</th><th>Condition</th><th>Credits</th><tr><th>Submission</th><th>create timestamp</th><th>1 Credit</th><tr><th>Submission</th><th>timestamp already exists</th><th>0.3 Credits</th><tr><th>Status</th><th>no timestamp information available</th><th>0.1 Credit</th><tr><th>Status</th><th>timestamp information</th><th>0.3 Credits</th><tr><th>Proof</th><th>no proof available</th><th>0.1 Credits</th><tr><th>Proof</th><th>merkle tree as proof</th><th>3 Credits</th><tr><th>Proof</th><th>seed as proof</th><th>3 Credits</th><tr><th>Proof</th><th>PDF Certificate</th><th>5 Credits</th><tr><th>Notification</th><th>webhook notification</th><th>1.5 Credits</th><tr><th>Notification</th><th>mail notification</th><th>5 Credits</th></table>
 *
 * OpenAPI spec version: 3.0
 * Contact: mail@originstamp.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.swagger.client.api;

import io.swagger.client.ApiException;
import io.swagger.client.model.ProofRequest;
import io.swagger.client.model.ResponseEntity;
import io.swagger.client.model.ServiceResponseTimestampResponse;
import io.swagger.client.model.ServiceResponseUsageDTO;
import io.swagger.client.model.TimestampRequest;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for OverviewApi
 */
@Ignore
public class OverviewApiTest {

    private final OverviewApi api = new OverviewApi();

    
    /**
     * Submission
     *
     * You can submit your hash with this function. If your api key is valid, your hash is added to batch and is scheduled for timestamping. If the hash already exists, the created flag in the response is set to false. You are also able to submit additional information, such as comment or notification credentials. Once a hash is successfully created for a certain crypto-currency, we can notify your desired target with the timestamp information (POST Request). Additionally, it is possible to include a preprint URL in the hash submission. Before the generation of the timestamp hash you can create a random UUID Version 4 and include https://originstamp.com/u/UUID where UUID is your UUID e.g. in a document you want to timestamp. In the preprint URL field you include your UUID and then it is possible to verify the timestamp within the document (or whatever).
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createTimestampUsingPOSTTest() throws ApiException {
        String authorization = null;
        TimestampRequest timestampRequest = null;
        ServiceResponseTimestampResponse response = api.createTimestampUsingPOST(authorization, timestampRequest);

        // TODO: test validations
    }
    
    /**
     * Usage
     *
     * With this interface you can receive the current api usage
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getCurrentApiKeyUsageUsingGETTest() throws ApiException {
        String authorization = null;
        ServiceResponseUsageDTO response = api.getCurrentApiKeyUsageUsingGET(authorization);

        // TODO: test validations
    }
    
    /**
     * Status
     *
     * The request returns information of a certain hash read from the URL parameter. The input parameter is a hash in hex representation. Field \&quot;created\&quot; always set to false.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getHashStatusUsingGETTest() throws ApiException {
        String authorization = null;
        String hashString = null;
        ServiceResponseTimestampResponse response = api.getHashStatusUsingGET(authorization, hashString);

        // TODO: test validations
    }
    
    /**
     * Proof
     *
     * This request can be used to proof a submission of a hash. This interface is required to request the evidence. With the help of this proof the verification of a timestamp independent from OriginStamp is necessary. A guide for the verification can be found &lt;a href&#x3D;\&quot;https://github.com/OriginStampTimestamping/originstamp-verification\&quot; target&#x3D;\&quot;_blank\&quot;&gt;here&lt;/a&gt; .Usually, the proof should be requested for each transferred hash and kept with the timestamped data so that an independent verification of the timestamp is possible at any time.As input, the used currency, the hash string and the type of proof is required. Then a file with the information for the submission proof will be returned. If the hash was submitted in an API version lower than 3, a XML file containing the essential information of the Merkle Tree will be returned. Otherwise, the seed file will be returned.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getProofUsingPOSTTest() throws ApiException {
        String authorization = null;
        ProofRequest proofRequest = null;
        ResponseEntity response = api.getProofUsingPOST(authorization, proofRequest);

        // TODO: test validations
    }
    
}
